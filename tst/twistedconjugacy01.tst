# TwistedConjugacy, file 1
#
# DO NOT EDIT THIS FILE - EDIT EXAMPLES IN THE SOURCE INSTEAD!
#
# This file has been generated by AutoDoc. It contains examples extracted from
# the package documentation. Each example is preceded by a comment which gives
# the name of a GAPDoc XML file and a line range from which the example were
# taken. Note that the XML file in turn may have been generated by AutoDoc
# from some other input.
#
gap> START_TEST("twistedconjugacy01.tst");

# doc/_Chapter_twicon.xml:37-53
gap> G := AlternatingGroup( 6 );;
gap> H := SymmetricGroup( 5 );;
gap> phi := GroupHomomorphismByImages( H, G, [ (1,2)(3,5,4), (2,3)(4,5) ],
>  [ (1,2)(3,4), () ] );;
gap> psi := GroupHomomorphismByImages( H, G, [ (1,2)(3,5,4), (2,3)(4,5) ],
>  [ (1,4)(3,6), () ] );;
gap> tc := TwistedConjugation( phi, psi );;
gap> g1 := (4,6,5);;
gap> g2 := (1,6,4,2)(3,5);;
gap> IsTwistedConjugate( psi, phi, g1, g2 );
false
gap> h := RepresentativeTwistedConjugation( phi, psi, g1, g2 );
(1,2)
gap> tc( g1, h ) = g2;
true

# doc/_Chapter_twicon.xml:146-172
gap> tcc := ReidemeisterClass( phi, psi, g1 );
(4,6,5)^G
gap> Representative( tcc );
(4,6,5)
gap> GroupHomomorphismsOfReidemeisterClass( tcc );
[ [ (1,2)(3,5,4), (2,3)(4,5) ] -> [ (1,2)(3,4), () ],
[ (1,2)(3,5,4), (2,3)(4,5) ] -> [ (1,4)(3,6), () ] ]
gap> ActingDomain( tcc ) = H;
true
gap> FunctionAction( tcc )( g1, h );
(1,6,4,2)(3,5)
gap> Random( tcc ) in tcc;
true
gap> List( tcc );
[ (4,6,5), (1,6,4,2)(3,5) ]
gap> Size( tcc );
2
gap> StabiliserOfExternalSet( tcc );
Group([ (1,2,3,4,5), (1,3,4,5,2) ])
gap> ReidemeisterClasses( phi, psi ){[1..7]};
[ ()^G, (4,5,6)^G, (4,6,5)^G, (3,4)(5,6)^G, (3,4,5)^G, (3,4,6)^G, (3,5,4)^G ]
gap> RepresentativesReidemeisterClasses( phi, psi ){[1..7]};
[ (), (4,5,6), (4,6,5), (3,4)(5,6), (3,4,5), (3,4,6), (3,5,4) ]
gap> NrTwistedConjugacyClasses( phi, psi );
184

# doc/_Chapter_twicon.xml:226-241
gap> Q := QuaternionGroup( 8 );;
gap> D := DihedralGroup( 8 );;
gap> ReidemeisterSpectrum( Q );
[ 2, 3, 5 ]
gap> ExtendedReidemeisterSpectrum( Q );
[ 1, 2, 3, 5 ]
gap> CoincidenceReidemeisterSpectrum( Q );
[ 1, 2, 3, 4, 5, 8 ]
gap> CoincidenceReidemeisterSpectrum( D, Q );
[ 4, 8 ]
gap> CoincidenceReidemeisterSpectrum( Q, D );
[ 2, 3, 4, 6, 8 ]
gap> TotalReidemeisterSpectrum( Q );
[ 1, 2, 3, 4, 5, 6, 8 ]

# doc/_Chapter_twicon.xml:288-302
gap> khi := GroupHomomorphismByImages( G, G, [ (1,2,3,4,5), (4,5,6) ],
>  [ (1,2,6,3,5), (1,4,5) ] );;
gap> ReidemeisterZetaCoefficients( khi );
[ [ 7 ], [  ] ]
gap> IsRationalReidemeisterZeta( khi );
true
gap> ReidemeisterZeta( khi );
function( s ) ... end
gap> s := Indeterminate( Rationals, "s" );;
gap> ReidemeisterZeta( khi )(s);
(1)/(-s^7+7*s^6-21*s^5+35*s^4-35*s^3+21*s^2-7*s+1)
gap> PrintReidemeisterZeta( khi );
"(1-s)^(-7)"

# doc/_Chapter_mult.xml:28-45
gap> H := SymmetricGroup( 5 );;
gap> G := AlternatingGroup( 6 );;
gap> tau := GroupHomomorphismByImages( H, G, [ (1,2)(3,5,4), (2,3)(4,5) ],
>  [ (1,3)(4,6), () ] );;
gap> phi := GroupHomomorphismByImages( H, G, [ (1,2)(3,5,4), (2,3)(4,5) ],
>  [ (1,2)(3,6), () ] );;
gap> psi := GroupHomomorphismByImages( H, G, [ (1,2)(3,5,4), (2,3)(4,5) ],
>  [ (1,4)(3,6), () ] );;
gap> khi := GroupHomomorphismByImages( H, G, [ (1,2)(3,5,4), (2,3)(4,5) ],
>  [ (1,2)(3,4), () ] );;
gap> IsTwistedConjugateMultiple( [ tau, phi ], [ psi, khi ],
>  [ (1,5)(4,6), (1,4)(3,5) ], [ (1,4,5,3,6), (2,4,5,6,3) ] );
true
gap> RepresentativeTwistedConjugationMultiple( [ tau, phi ], [ psi, khi ],
>  [ (1,5)(4,6), (1,4)(3,5) ], [ (1,4,5,3,6), (2,4,5,6,3) ] );
(1,2)

# doc/_Chapter_homs.xml:39-57
gap> G := SymmetricGroup( 6 );;
gap> Auts := RepresentativesAutomorphismClasses( G );;
gap> Size( Auts );
2
gap> ForAll( Auts, IsGroupHomomorphism and IsEndoMapping and IsBijective );
true
gap> Ends := RepresentativesEndomorphismClasses( G );;
gap> Size( Ends );
6
gap> ForAll( Ends, IsGroupHomomorphism and IsEndoMapping );
true
gap> H := SymmetricGroup( 5 );;
gap> Homs := RepresentativesHomomorphismClasses( H, G );;
gap> Size( Homs );
6
gap> ForAll( Homs, IsGroupHomomorphism );
true

# doc/_Chapter_homs.xml:86-97
gap> phi := GroupHomomorphismByImages( G, G, [ (1,2,5,6,4), (1,2)(3,6)(4,5) ],
>  [ (2,3,4,5,6), (1,2) ] );;
gap> Set( FixedPointGroup( phi ) );
[ (), (1,2,3,6,5), (1,3,5,2,6), (1,5,6,3,2), (1,6,2,5,3) ]
gap> psi := GroupHomomorphismByImages( H, G, [ (1,2,3,4,5), (1,2) ],
>  [ (), (1,2) ] );;
gap> khi := GroupHomomorphismByImages( H, G, [ (1,2,3,4,5), (1,2) ],
>  [ (), (1,2)(3,4) ] );;
gap> CoincidenceGroup( psi, khi ) = AlternatingGroup( 5 );
true

# doc/_Chapter_homs.xml:122-137
gap> G := PcGroupCode( 1018013, 28 );;
gap> phi := GroupHomomorphismByImages( G, G, [ G.1, G.3 ],
>  [ G.1*G.2*G.3^2, G.3^4 ] );;
gap> N := DerivedSubgroup( G );;
gap> p := NaturalHomomorphismByNormalSubgroup( G, N );
[ f1, f2, f3 ] -> [ f1, f2, <identity> of ... ]
gap> ind := InducedHomomorphism( p, p, phi );
[ f1 ] -> [ f1*f2 ]
gap> Source( ind ) = Range( p ) and Range( ind ) = Range( p );
true
gap> res := RestrictedHomomorphism( phi, N, N );
[ f3 ] -> [ f3^4 ]
gap> Source( res ) = N and Range( res ) = N;
true

# doc/_Chapter_csts.xml:22-32
gap> G := ExamplesOfSomePcpGroups( 5 );;
gap> H := Subgroup( G, [ G.1*G.2^-1*G.3^-1*G.4^-1, G.2^-1*G.3*G.4^-2 ] );;
gap> K := Subgroup( G, [ G.1*G.3^-2*G.4^2, G.1*G.4^4 ] );;
gap> x := G.1*G.3^-1;;
gap> y := G.1*G.2^-1*G.3^-2*G.4^-1;;
gap> Hx := RightCoset( H, x );;
gap> Ky := RightCoset( K, y );;
gap> Intersection( Hx, Ky );
RightCoset(<group with 2 generators>,<object>)

# doc/_Chapter_csts.xml:49-55
gap> HxK := DoubleCoset( H, x, K );;
gap> G.1 in HxK;
false
gap> G.2 in HxK;
true

#
gap> STOP_TEST("twistedconjugacy01.tst", 1);
