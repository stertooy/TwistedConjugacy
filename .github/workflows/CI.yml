name: CI

on:
  - push
  - pull_request
  - workflow_dispatch

jobs:
  test:
    name: "Test on GAP-${{ matrix.gap-branch }}"
    runs-on: ubuntu-latest
    if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - gap-branch: "4.10"
          - gap-branch: "4.9"
            
    container:
      image: ghcr.io/stertooy/gda-image:${{ matrix.gap-branch }}

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
      - name: "Add extra packages to GAP"
        uses: sTertooy/GDA-extra-pkg@v0.3
        with:
          PACKAGES: ${{ matrix.packages }}
      - name: "Build package"
        uses: sTertooy/GDA-build-pkg@v0.4
      - name: "tests"
        shell: bash
        run : |
         set -ex
         LC_CTYPE=C.UTF-8
         export LC_CTYPE
         # rm -rf /opt/gap/pkg/Browse
         TERM="dumb"
         export TERM
         rm /opt/gap/pkg/Browse/init.g
         cat > /opt/gap/pkg/Browse/init.g <<EOF
            #############################################################################
            ##
            #W  init.g          GAP 4 package `Browse'        Thomas Breuer, Frank Lübeck
            ##
            #Y  Copyright (C) 2006-2007, Lehrstuhl D für Mathematik, RWTH Aachen, Germany
            ##

            # 'BASE_SIZE_METHODS_OPER_ENTRY' is new in GAP 4.10;
            # for backwards compatibility, if it is missing set it to 4.
            if not IsBound( BASE_SIZE_METHODS_OPER_ENTRY ) then
              if not IsBound( BindConstant ) then
                BindGlobal( "BASE_SIZE_METHODS_OPER_ENTRY", 4 );
              else
                BindConstant( "BASE_SIZE_METHODS_OPER_ENTRY", 4 );
              fi;
            fi;

            # make sure that TERM is set in environment, if not we set it to "dumb"
            # (here only in GAP's info about the environment setting, but in kernel
            # code we also change the actual environment)
            if not IsBound(GAPInfo.SystemEnvironment.TERM) then
              Print("TERM NOT FOUND\n");
              GAPInfo.SystemEnvironment.TERM := "dumb";
            fi;

            # load kernel module
            if (not IsBound(NCurses)) and
               ("ncurses" in SHOW_STAT()) then
              # try static module
              LoadStaticModule("ncurses");
            fi;
            if (not IsBound(NCurses)) and
               (Filename(DirectoriesPackagePrograms("Browse"), "ncurses.so") <> fail) then
              LoadDynamicModule(Filename(DirectoriesPackagePrograms("Browse"),
                "ncurses.so"));
            fi;

            # check if the kernel module was loaded and has correct version
            if not IsBound(NCurses) then
              if UserPreference("browse", "loadwithoutncurses") <> true then
                Print("TRYING UNBIND\n");
                Unbind(GAPInfo.PackagesLoaded.browse);
                Error("Browse: Something went wrong with loading the kernel module.\n");
              else
                # read a fake NCurses record and reset user preferences
                LogPackageLoadingMessage( PACKAGE_WARNING,
                    [ "Loaded fake NCurses record because ('loadwithoutncurses' set)" ] );
                ReadPackage("Browse", "lib/fakeNCurses.g");
                NCurses.KernelModuleVersion := GAPInfo.PackagesLoaded.browse[2];
                Append(GAPInfo.PackagesLoaded.browse[3],
                       " Without NCurses PLEASE COMPILE!!!");
                SetUserPreference( "browse", "SelectHelpMatches", false );
                SetUserPreference( "browse", "SelectPackageName", false );
                SetUserPreference( "browse", "EnableMouseEvents", false );
              fi;
            fi;
            if GAPInfo.PackagesLoaded.browse[2] <> NCurses.KernelModuleVersion then
              GAPInfo.browseerror := Concatenation("Browse: Kernel module has version ",
                  NCurses.KernelModuleVersion, " but version ",
                  GAPInfo.PackagesLoaded.browse[2], " is to be loaded.\n");
              Unbind(GAPInfo.PackagesLoaded.browse);
              Error(GAPInfo.browseerror);
            fi;

            ReadPackage("Browse", "lib/ncurses.gd");
            ReadPackage("Browse", "lib/browse.gd");

            # support for database attributes
            ReadPackage( "Browse", "lib/brdbattr.gd" );

            # utilities for Browse applications (must be read before `read.g')
            ReadPackage( "Browse", "lib/brutils.g" );

            Browse_svnRevision := "605";
         EOF
         
         /opt/gap/bin/gap.sh -A <<GAPInput
         GAPInfo.SystemEnvironment;
         GAPInfo.SystemEnvironment.TERM;
         GAPInput
      - name: "Run package tests with necessary packages"
        uses: sTertooy/GDA-test-pkg@v0.5
        with:
          GAP_FLAGS: "-A"
          COVERAGE: ${{ matrix.coverage }}
          ONLY_NEEDED: true
      - name: "Run package tests with suggested packages"
        uses: sTertooy/GDA-test-pkg@v0.5
        with:
          COVERAGE: ${{ matrix.coverage }}
      - name: "Run package tests with all packages"
        uses: sTertooy/GDA-test-pkg@v0.5
        with:
          ALL_PACKAGES: true
      - name: "Run GAP tests with necessary packages"
        uses: sTertooy/GDA-test-gap@v0.3
        with:
          ONLY_NEEDED: true
      - name: "Run GAP tests with suggested packages"
        uses: sTertooy/GDA-test-gap@v0.3
      - name: "Process coverage"
        uses: stertooy/GDA-coverage@v0.3
        if: ${{ matrix.coverage }}
      - name: "Upload coverage"
        uses: codecov/codecov-action@v3
        if: ${{ matrix.coverage }}
        with:
          files: ./gap-coverage.json
          fail_ci_if_error: true

  manual:
    name: "Build manual"
    runs-on: ubuntu-latest
    if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}
    
    container:
      image: ghcr.io/stertooy/gap-docker-alpine:tex
    
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
      - name: "Add extra packages to GAP"
        uses: sTertooy/GDA-extra-pkg@v0.3
        with:
          PACKAGES: ${{ matrix.packages }}
      - name: "Build package"
        uses: sTertooy/GDA-build-pkg@v0.4
      - name: "Build manual"
        uses: stertooy/GDA-manual@v0.3
      - name: "Upload manual"
        uses: actions/upload-artifact@v3
        with:
          name: "Manual"
          path: ./doc/manual.pdf
          if-no-files-found: error
